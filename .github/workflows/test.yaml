---
name: Run all the tests
'on': workflow_call

env:
  IMAGE_REGISTRY: ghcr.io

jobs:
  prepare-matrix:
    uses: ajgon/containers/.github/workflows/prepare-matrix.yaml@master

  test:
    needs: prepare-matrix
    name: Test
    runs-on: ubuntu-latest
    if: ${{ needs.prepare-matrix.outputs.matrix != '' && needs.prepare-matrix.outputs.matrix != '[]' }}
    strategy:
      matrix:
        apps: ["${{ fromJson(needs.prepare-matrix.outputs.matrix) }}"]
      fail-fast: false
    # yamllint disable rule:line-length
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup workflow Variables
        id: vars
        shell: bash
        run: |-
          test_mute_cmd=$(jq '.testMuteCmd' --raw-output apps/${{ matrix.apps.app }}/metadata.json)
          build_version=$(jq --arg chan ${{ matrix.apps.channel }} --raw-output '(.channels | .[] | select(.name == $chan)) | .version' ./apps/${{ matrix.apps.app }}/metadata.json)

          echo "build_version=${build_version}" >> $GITHUB_OUTPUT
          echo "goss_file=./apps/${{ matrix.apps.app }}/ci/goss.yaml" >> $GITHUB_OUTPUT
          if [[ "${test_mute_cmd}" == true ]]; then
            echo "goss_args=tail -f /dev/null" >> $GITHUB_OUTPUT
          fi

      - name: Setup Goss
        uses: e1himself/goss-installation-action@v1.1.0
        with:
          # renovate: datasource=github-releases depName=goss-org/goss
          version: v0.3.21

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build container image for testing
        uses: docker/build-push-action@v4
        with:
          build-args: |-
            VERSION=${{ steps.vars.outputs.build_version }}
            CHANNEL=${{ matrix.apps.channel }}
          context: apps/${{ matrix.apps.app }}
          platforms: linux/amd64  # load does not support muti-arch https://github.com/docker/buildx/issues/290
          file: apps/${{ matrix.apps.app }}/Dockerfile
          load: true
          no-cache: true
          tags: |-
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.apps.app }}:testing
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Goss tests
        id: dgoss
        shell: bash
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ steps.vars.outputs.goss_file }}
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: >-
          dgoss run ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.apps.app }}:testing ${{ steps.vars.outputs.goss_args }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: "${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.apps.app }}:testing"
          args: --file=apps/${{ matrix.apps.app }}/Dockerfile --exclude-base-image-vulns

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  build-success:
    name: Build matrix success
    runs-on: ubuntu-latest
    needs:
      - test
    if: ${{ needs.prepare-matrix.outputs.matrix != '' && needs.prepare-matrix.outputs.matrix != '[]' }}
    steps:
      - name: Check build matrix status
        if: ${{ needs.test.result != 'success' }}
        run: exit 1
